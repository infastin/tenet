#!/usr/bin/env ruby
# typed: strict
# frozen_string_literal: true

require_relative "../lib/task2"

class Main
	extend T::Sig

	sig { params(file: File).returns(Task2::SquareMatrix) }
	def self.read_matrix(file)
		size = file.readline.to_i
		raise "Format of supplied file is invalid" if size.zero?
		matrix = Task2::SquareMatrix.new(size)

		size.times do |i|
			line = file.readline
			numbers = line.split.map { |number| number.to_f }
			raise "Format of supplied file is invalid" unless numbers.length.eql?(size)
			matrix.fill(index: i, value: numbers)
		end

		matrix
	end

	def self.main
		args = Task2::Parser::parse(ARGV)

		raise "Input file isn't specified" if args.filename.nil?
		raise "File #{args.filename} doesn't exist" unless File.exist?(args.filename)

		matrix = File.open(T.must(args.filename), "r") do |file|
			read_matrix(file)
		end

		output, cost, coherent = Task2::Kruskal(matrix)

		puts(output.length, cost, coherent)
	end
end

if __FILE__ == $0
	Main.main
end
